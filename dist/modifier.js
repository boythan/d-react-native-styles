import { isArray, isEmpty } from 'lodash';
import Colors from "./color/_color";
export const generateStyleValue = (variants, values, defaultValues) => {
  const res = {};

  if (!isEmpty(variants) && !isEmpty(values)) {
    try {
      Object.keys(variants).forEach(variant => {
        Object.keys(values).forEach(valueKey => {
          let className;

          if (valueKey) {
            className = `${variant}-${valueKey}`;
          } else {
            className = `${variant}`;
          }

          const att = variants?.[variant];
          const value = values?.[valueKey];
          let obj = {};

          if (isArray(att)) {
            att.forEach(i => {
              obj[i] = value;
            });
          } else {
            obj[att] = value;
          }

          if (defaultValues) {
            obj = { ...obj,
              ...defaultValues
            };
          }

          res[className] = obj;
        });
      });
    } catch (error) {
      console.error('Generate style value errors', {
        error
      });
    }
  }

  return res;
};
export const getColorValue = color => {
  let value = color; //@ts-ignore

  if (Colors[color]) {
    //@ts-ignore
    value = Colors[color];
  }

  return value;
};
export const getThemeColor = ({
  colorDarkMode = 'white',
  colorLightMode = 'black',
  colorScheme
}) => {
  if (colorScheme === 'dark') {
    return colorDarkMode;
  }

  return colorLightMode;
};
export default {
  generateStyleValue,
  getColorValue
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0FycmF5IiwiaXNFbXB0eSIsIkNvbG9ycyIsImdlbmVyYXRlU3R5bGVWYWx1ZSIsInZhcmlhbnRzIiwidmFsdWVzIiwiZGVmYXVsdFZhbHVlcyIsInJlcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwidmFyaWFudCIsInZhbHVlS2V5IiwiY2xhc3NOYW1lIiwiYXR0IiwidmFsdWUiLCJvYmoiLCJpIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0Q29sb3JWYWx1ZSIsImNvbG9yIiwiZ2V0VGhlbWVDb2xvciIsImNvbG9yRGFya01vZGUiLCJjb2xvckxpZ2h0TW9kZSIsImNvbG9yU2NoZW1lIl0sInNvdXJjZXMiOlsiLi4vc3JjL21vZGlmaWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNBcnJheSwgaXNFbXB0eX0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7Q29sb3JTY2hlbWVOYW1lfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IENvbG9ycyBmcm9tICcuL2NvbG9yL19jb2xvcic7XG5pbXBvcnQge0NvbG9yS2V5VHlwZX0gZnJvbSAnLi9jb2xvci9fY29sb3JzLWRlZmF1bHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElHZXRUaGVtZUNvbG9yUHJvcHMge1xuICBjb2xvckxpZ2h0TW9kZT86IENvbG9yS2V5VHlwZTtcbiAgY29sb3JEYXJrTW9kZT86IENvbG9yS2V5VHlwZTtcbiAgY29sb3JTY2hlbWU6IENvbG9yU2NoZW1lTmFtZTtcbn1cblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlU3R5bGVWYWx1ZSA9IChcbiAgdmFyaWFudHM6IGFueSxcbiAgdmFsdWVzOiBhbnksXG4gIGRlZmF1bHRWYWx1ZXM/OiBhbnksXG4pOiBhbnkgPT4ge1xuICBjb25zdCByZXM6IGFueSA9IHt9O1xuICBpZiAoIWlzRW1wdHkodmFyaWFudHMpICYmICFpc0VtcHR5KHZhbHVlcykpIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmtleXModmFyaWFudHMpLmZvckVhY2godmFyaWFudCA9PiB7XG4gICAgICAgIE9iamVjdC5rZXlzKHZhbHVlcykuZm9yRWFjaCh2YWx1ZUtleSA9PiB7XG4gICAgICAgICAgbGV0IGNsYXNzTmFtZTtcbiAgICAgICAgICBpZiAodmFsdWVLZXkpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGAke3ZhcmlhbnR9LSR7dmFsdWVLZXl9YDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xhc3NOYW1lID0gYCR7dmFyaWFudH1gO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBhdHQgPSB2YXJpYW50cz8uW3ZhcmlhbnQgYXMgYW55XTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlcz8uW3ZhbHVlS2V5IGFzIGFueV07XG4gICAgICAgICAgbGV0IG9iajogYW55ID0ge307XG4gICAgICAgICAgaWYgKGlzQXJyYXkoYXR0KSkge1xuICAgICAgICAgICAgYXR0LmZvckVhY2goaSA9PiB7XG4gICAgICAgICAgICAgIG9ialtpXSA9IHZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ialthdHRdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWVzKSB7XG4gICAgICAgICAgICBvYmogPSB7Li4ub2JqLCAuLi5kZWZhdWx0VmFsdWVzfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzW2NsYXNzTmFtZV0gPSBvYmo7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0dlbmVyYXRlIHN0eWxlIHZhbHVlIGVycm9ycycsIHtlcnJvcn0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvbG9yVmFsdWUgPSAoY29sb3I/OiBzdHJpbmcpID0+IHtcbiAgbGV0IHZhbHVlOiBhbnkgPSBjb2xvcjtcbiAgLy9AdHMtaWdub3JlXG4gIGlmIChDb2xvcnNbY29sb3JdKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgdmFsdWUgPSBDb2xvcnNbY29sb3JdIGFzIGFueTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VGhlbWVDb2xvciA9ICh7XG4gIGNvbG9yRGFya01vZGUgPSAnd2hpdGUnLFxuICBjb2xvckxpZ2h0TW9kZSA9ICdibGFjaycsXG4gIGNvbG9yU2NoZW1lLFxufTogSUdldFRoZW1lQ29sb3JQcm9wcykgPT4ge1xuICBpZiAoY29sb3JTY2hlbWUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiBjb2xvckRhcmtNb2RlO1xuICB9XG4gIHJldHVybiBjb2xvckxpZ2h0TW9kZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2VuZXJhdGVTdHlsZVZhbHVlLFxuICBnZXRDb2xvclZhbHVlLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUUEsT0FBUixFQUFpQkMsT0FBakIsUUFBK0IsUUFBL0I7QUFFQSxPQUFPQyxNQUFQO0FBU0EsT0FBTyxNQUFNQyxrQkFBa0IsR0FBRyxDQUNoQ0MsUUFEZ0MsRUFFaENDLE1BRmdDLEVBR2hDQyxhQUhnQyxLQUl4QjtFQUNSLE1BQU1DLEdBQVEsR0FBRyxFQUFqQjs7RUFDQSxJQUFJLENBQUNOLE9BQU8sQ0FBQ0csUUFBRCxDQUFSLElBQXNCLENBQUNILE9BQU8sQ0FBQ0ksTUFBRCxDQUFsQyxFQUE0QztJQUMxQyxJQUFJO01BQ0ZHLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTCxRQUFaLEVBQXNCTSxPQUF0QixDQUE4QkMsT0FBTyxJQUFJO1FBQ3ZDSCxNQUFNLENBQUNDLElBQVAsQ0FBWUosTUFBWixFQUFvQkssT0FBcEIsQ0FBNEJFLFFBQVEsSUFBSTtVQUN0QyxJQUFJQyxTQUFKOztVQUNBLElBQUlELFFBQUosRUFBYztZQUNaQyxTQUFTLEdBQUksR0FBRUYsT0FBUSxJQUFHQyxRQUFTLEVBQW5DO1VBQ0QsQ0FGRCxNQUVPO1lBQ0xDLFNBQVMsR0FBSSxHQUFFRixPQUFRLEVBQXZCO1VBQ0Q7O1VBQ0QsTUFBTUcsR0FBRyxHQUFHVixRQUFRLEdBQUdPLE9BQUgsQ0FBcEI7VUFDQSxNQUFNSSxLQUFLLEdBQUdWLE1BQU0sR0FBR08sUUFBSCxDQUFwQjtVQUNBLElBQUlJLEdBQVEsR0FBRyxFQUFmOztVQUNBLElBQUloQixPQUFPLENBQUNjLEdBQUQsQ0FBWCxFQUFrQjtZQUNoQkEsR0FBRyxDQUFDSixPQUFKLENBQVlPLENBQUMsSUFBSTtjQUNmRCxHQUFHLENBQUNDLENBQUQsQ0FBSCxHQUFTRixLQUFUO1lBQ0QsQ0FGRDtVQUdELENBSkQsTUFJTztZQUNMQyxHQUFHLENBQUNGLEdBQUQsQ0FBSCxHQUFXQyxLQUFYO1VBQ0Q7O1VBQ0QsSUFBSVQsYUFBSixFQUFtQjtZQUNqQlUsR0FBRyxHQUFHLEVBQUMsR0FBR0EsR0FBSjtjQUFTLEdBQUdWO1lBQVosQ0FBTjtVQUNEOztVQUNEQyxHQUFHLENBQUNNLFNBQUQsQ0FBSCxHQUFpQkcsR0FBakI7UUFDRCxDQXJCRDtNQXNCRCxDQXZCRDtJQXdCRCxDQXpCRCxDQXlCRSxPQUFPRSxLQUFQLEVBQWM7TUFDZEMsT0FBTyxDQUFDRCxLQUFSLENBQWMsNkJBQWQsRUFBNkM7UUFBQ0E7TUFBRCxDQUE3QztJQUNEO0VBQ0Y7O0VBQ0QsT0FBT1gsR0FBUDtBQUNELENBckNNO0FBdUNQLE9BQU8sTUFBTWEsYUFBYSxHQUFJQyxLQUFELElBQW9CO0VBQy9DLElBQUlOLEtBQVUsR0FBR00sS0FBakIsQ0FEK0MsQ0FFL0M7O0VBQ0EsSUFBSW5CLE1BQU0sQ0FBQ21CLEtBQUQsQ0FBVixFQUFtQjtJQUNqQjtJQUNBTixLQUFLLEdBQUdiLE1BQU0sQ0FBQ21CLEtBQUQsQ0FBZDtFQUNEOztFQUNELE9BQU9OLEtBQVA7QUFDRCxDQVJNO0FBVVAsT0FBTyxNQUFNTyxhQUFhLEdBQUcsQ0FBQztFQUM1QkMsYUFBYSxHQUFHLE9BRFk7RUFFNUJDLGNBQWMsR0FBRyxPQUZXO0VBRzVCQztBQUg0QixDQUFELEtBSUY7RUFDekIsSUFBSUEsV0FBVyxLQUFLLE1BQXBCLEVBQTRCO0lBQzFCLE9BQU9GLGFBQVA7RUFDRDs7RUFDRCxPQUFPQyxjQUFQO0FBQ0QsQ0FUTTtBQVdQLGVBQWU7RUFDYnJCLGtCQURhO0VBRWJpQjtBQUZhLENBQWYifQ==