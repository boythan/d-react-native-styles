import { Platform } from 'react-native';
import DefaultFont from "./_fonts-default";
export class FontClass {
  constructor() {
    Object.assign(this, DefaultFont);
  }
  /**
   * Load custom set of fonts
   * arguments:
   * fonts - map of keys and font family values e.g {iosFont: Poppins-Regular}
   */


  loadFonts(fonts, customFonts = {}) {
    const defaultFontOS = DefaultFont[Platform.OS];
    const defaultFontFamily = defaultFontOS.family;
    const defaultBaseFontSize = defaultFontOS.baseFontSize;
    const fontConfig = fonts[Platform.OS] ?? defaultFontOS;
    const fontConfigFamily = fontConfig?.family ?? defaultFontFamily;
    const fontBold = fontConfigFamily.bold ?? defaultFontFamily?.bold;
    const fontMedium = fontConfigFamily.medium ?? defaultFontFamily?.medium;
    const fontSemiBold = fontConfigFamily.semiBold ?? defaultFontFamily?.semiBold;
    const fontRegular = fontConfigFamily.regular ?? defaultFontFamily?.regular;
    const fontLight = fontConfigFamily.light ?? defaultFontFamily?.light;
    const baseSize = fontConfig.baseFontSize || defaultBaseFontSize;
    this.fontClass = { ...this.fontClass,
      h0: {
        fontSize: baseSize * 2,
        fontFamily: fontBold
      },
      h1: {
        fontSize: baseSize * 1.8,
        fontFamily: fontBold
      },
      h2: {
        fontSize: baseSize * 1.6,
        fontFamily: fontBold
      },
      h3: {
        fontSize: baseSize * 1.4,
        fontFamily: fontMedium
      },
      h4: {
        fontSize: baseSize * 1.2,
        fontFamily: fontSemiBold
      },
      h5: {
        fontSize: baseSize,
        fontFamily: fontSemiBold
      },
      label: {
        fontSize: baseSize * 1.2,
        fontFamily: fontSemiBold
      },
      'text-large': {
        fontSize: baseSize * 1.4,
        fontFamily: fontRegular
      },
      'text-medium': {
        fontSize: baseSize * 1.2,
        fontFamily: fontRegular
      },
      text: {
        fontSize: baseSize,
        fontFamily: fontRegular
      },
      'text-small': {
        fontSize: baseSize * 0.8,
        fontFamily: fontLight
      },
      ...customFonts
    };
  }

}
const Fonts = new FontClass();
Fonts.loadFonts(DefaultFont);
export default Fonts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQbGF0Zm9ybSIsIkRlZmF1bHRGb250IiwiRm9udENsYXNzIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJhc3NpZ24iLCJsb2FkRm9udHMiLCJmb250cyIsImN1c3RvbUZvbnRzIiwiZGVmYXVsdEZvbnRPUyIsIk9TIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJmYW1pbHkiLCJkZWZhdWx0QmFzZUZvbnRTaXplIiwiYmFzZUZvbnRTaXplIiwiZm9udENvbmZpZyIsImZvbnRDb25maWdGYW1pbHkiLCJmb250Qm9sZCIsImJvbGQiLCJmb250TWVkaXVtIiwibWVkaXVtIiwiZm9udFNlbWlCb2xkIiwic2VtaUJvbGQiLCJmb250UmVndWxhciIsInJlZ3VsYXIiLCJmb250TGlnaHQiLCJsaWdodCIsImJhc2VTaXplIiwiZm9udENsYXNzIiwiaDAiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwibGFiZWwiLCJ0ZXh0IiwiRm9udHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvZm9udC9fZm9udC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BsYXRmb3JtfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IERlZmF1bHRGb250IGZyb20gJy4vX2ZvbnRzLWRlZmF1bHQnO1xuXG5leHBvcnQgY2xhc3MgRm9udENsYXNzIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xuICBmb250Q2xhc3M6IGFueTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIERlZmF1bHRGb250KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIGN1c3RvbSBzZXQgb2YgZm9udHNcbiAgICogYXJndW1lbnRzOlxuICAgKiBmb250cyAtIG1hcCBvZiBrZXlzIGFuZCBmb250IGZhbWlseSB2YWx1ZXMgZS5nIHtpb3NGb250OiBQb3BwaW5zLVJlZ3VsYXJ9XG4gICAqL1xuICBsb2FkRm9udHMoZm9udHM6IGFueSwgY3VzdG9tRm9udHMgPSB7fSkge1xuICAgIGNvbnN0IGRlZmF1bHRGb250T1MgPSAoRGVmYXVsdEZvbnQgYXMgYW55KVtQbGF0Zm9ybS5PU107XG4gICAgY29uc3QgZGVmYXVsdEZvbnRGYW1pbHkgPSBkZWZhdWx0Rm9udE9TLmZhbWlseTtcbiAgICBjb25zdCBkZWZhdWx0QmFzZUZvbnRTaXplID0gZGVmYXVsdEZvbnRPUy5iYXNlRm9udFNpemU7XG5cbiAgICBjb25zdCBmb250Q29uZmlnID0gZm9udHNbUGxhdGZvcm0uT1NdID8/IGRlZmF1bHRGb250T1M7XG4gICAgY29uc3QgZm9udENvbmZpZ0ZhbWlseSA9IGZvbnRDb25maWc/LmZhbWlseSA/PyBkZWZhdWx0Rm9udEZhbWlseTtcblxuICAgIGNvbnN0IGZvbnRCb2xkID0gZm9udENvbmZpZ0ZhbWlseS5ib2xkID8/IGRlZmF1bHRGb250RmFtaWx5Py5ib2xkO1xuICAgIGNvbnN0IGZvbnRNZWRpdW0gPSBmb250Q29uZmlnRmFtaWx5Lm1lZGl1bSA/PyBkZWZhdWx0Rm9udEZhbWlseT8ubWVkaXVtO1xuICAgIGNvbnN0IGZvbnRTZW1pQm9sZCA9XG4gICAgICBmb250Q29uZmlnRmFtaWx5LnNlbWlCb2xkID8/IGRlZmF1bHRGb250RmFtaWx5Py5zZW1pQm9sZDtcbiAgICBjb25zdCBmb250UmVndWxhciA9IGZvbnRDb25maWdGYW1pbHkucmVndWxhciA/PyBkZWZhdWx0Rm9udEZhbWlseT8ucmVndWxhcjtcbiAgICBjb25zdCBmb250TGlnaHQgPSBmb250Q29uZmlnRmFtaWx5LmxpZ2h0ID8/IGRlZmF1bHRGb250RmFtaWx5Py5saWdodDtcblxuICAgIGNvbnN0IGJhc2VTaXplID0gZm9udENvbmZpZy5iYXNlRm9udFNpemUgfHwgZGVmYXVsdEJhc2VGb250U2l6ZTtcblxuICAgIHRoaXMuZm9udENsYXNzID0ge1xuICAgICAgLi4udGhpcy5mb250Q2xhc3MsXG5cbiAgICAgIGgwOiB7XG4gICAgICAgIGZvbnRTaXplOiBiYXNlU2l6ZSAqIDIsXG4gICAgICAgIGZvbnRGYW1pbHk6IGZvbnRCb2xkLFxuICAgICAgfSxcbiAgICAgIGgxOiB7XG4gICAgICAgIGZvbnRTaXplOiBiYXNlU2l6ZSAqIDEuOCxcbiAgICAgICAgZm9udEZhbWlseTogZm9udEJvbGQsXG4gICAgICB9LFxuICAgICAgaDI6IHtcbiAgICAgICAgZm9udFNpemU6IGJhc2VTaXplICogMS42LFxuICAgICAgICBmb250RmFtaWx5OiBmb250Qm9sZCxcbiAgICAgIH0sXG4gICAgICBoMzoge1xuICAgICAgICBmb250U2l6ZTogYmFzZVNpemUgKiAxLjQsXG4gICAgICAgIGZvbnRGYW1pbHk6IGZvbnRNZWRpdW0sXG4gICAgICB9LFxuICAgICAgaDQ6IHtcbiAgICAgICAgZm9udFNpemU6IGJhc2VTaXplICogMS4yLFxuICAgICAgICBmb250RmFtaWx5OiBmb250U2VtaUJvbGQsXG4gICAgICB9LFxuICAgICAgaDU6IHtcbiAgICAgICAgZm9udFNpemU6IGJhc2VTaXplLFxuICAgICAgICBmb250RmFtaWx5OiBmb250U2VtaUJvbGQsXG4gICAgICB9LFxuXG4gICAgICBsYWJlbDoge1xuICAgICAgICBmb250U2l6ZTogYmFzZVNpemUgKiAxLjIsXG4gICAgICAgIGZvbnRGYW1pbHk6IGZvbnRTZW1pQm9sZCxcbiAgICAgIH0sXG5cbiAgICAgICd0ZXh0LWxhcmdlJzoge1xuICAgICAgICBmb250U2l6ZTogYmFzZVNpemUgKiAxLjQsXG4gICAgICAgIGZvbnRGYW1pbHk6IGZvbnRSZWd1bGFyLFxuICAgICAgfSxcbiAgICAgICd0ZXh0LW1lZGl1bSc6IHtcbiAgICAgICAgZm9udFNpemU6IGJhc2VTaXplICogMS4yLFxuICAgICAgICBmb250RmFtaWx5OiBmb250UmVndWxhcixcbiAgICAgIH0sXG5cbiAgICAgIHRleHQ6IHtcbiAgICAgICAgZm9udFNpemU6IGJhc2VTaXplLFxuICAgICAgICBmb250RmFtaWx5OiBmb250UmVndWxhcixcbiAgICAgIH0sXG5cbiAgICAgICd0ZXh0LXNtYWxsJzoge1xuICAgICAgICBmb250U2l6ZTogYmFzZVNpemUgKiAwLjgsXG4gICAgICAgIGZvbnRGYW1pbHk6IGZvbnRMaWdodCxcbiAgICAgIH0sXG5cbiAgICAgIC4uLmN1c3RvbUZvbnRzLFxuICAgIH07XG4gIH1cbn1cblxuY29uc3QgRm9udHMgPSBuZXcgRm9udENsYXNzKCk7XG5Gb250cy5sb2FkRm9udHMoRGVmYXVsdEZvbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBGb250cztcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUUEsUUFBUixRQUF1QixjQUF2QjtBQUNBLE9BQU9DLFdBQVA7QUFFQSxPQUFPLE1BQU1DLFNBQU4sQ0FBZ0I7RUFJckJDLFdBQVcsR0FBRztJQUNaQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxJQUFkLEVBQW9CSixXQUFwQjtFQUNEO0VBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7O0VBQ0VLLFNBQVMsQ0FBQ0MsS0FBRCxFQUFhQyxXQUFXLEdBQUcsRUFBM0IsRUFBK0I7SUFDdEMsTUFBTUMsYUFBYSxHQUFJUixXQUFELENBQXFCRCxRQUFRLENBQUNVLEVBQTlCLENBQXRCO0lBQ0EsTUFBTUMsaUJBQWlCLEdBQUdGLGFBQWEsQ0FBQ0csTUFBeEM7SUFDQSxNQUFNQyxtQkFBbUIsR0FBR0osYUFBYSxDQUFDSyxZQUExQztJQUVBLE1BQU1DLFVBQVUsR0FBR1IsS0FBSyxDQUFDUCxRQUFRLENBQUNVLEVBQVYsQ0FBTCxJQUFzQkQsYUFBekM7SUFDQSxNQUFNTyxnQkFBZ0IsR0FBR0QsVUFBVSxFQUFFSCxNQUFaLElBQXNCRCxpQkFBL0M7SUFFQSxNQUFNTSxRQUFRLEdBQUdELGdCQUFnQixDQUFDRSxJQUFqQixJQUF5QlAsaUJBQWlCLEVBQUVPLElBQTdEO0lBQ0EsTUFBTUMsVUFBVSxHQUFHSCxnQkFBZ0IsQ0FBQ0ksTUFBakIsSUFBMkJULGlCQUFpQixFQUFFUyxNQUFqRTtJQUNBLE1BQU1DLFlBQVksR0FDaEJMLGdCQUFnQixDQUFDTSxRQUFqQixJQUE2QlgsaUJBQWlCLEVBQUVXLFFBRGxEO0lBRUEsTUFBTUMsV0FBVyxHQUFHUCxnQkFBZ0IsQ0FBQ1EsT0FBakIsSUFBNEJiLGlCQUFpQixFQUFFYSxPQUFuRTtJQUNBLE1BQU1DLFNBQVMsR0FBR1QsZ0JBQWdCLENBQUNVLEtBQWpCLElBQTBCZixpQkFBaUIsRUFBRWUsS0FBL0Q7SUFFQSxNQUFNQyxRQUFRLEdBQUdaLFVBQVUsQ0FBQ0QsWUFBWCxJQUEyQkQsbUJBQTVDO0lBRUEsS0FBS2UsU0FBTCxHQUFpQixFQUNmLEdBQUcsS0FBS0EsU0FETztNQUdmQyxFQUFFLEVBQUU7UUFDRkMsUUFBUSxFQUFFSCxRQUFRLEdBQUcsQ0FEbkI7UUFFRkksVUFBVSxFQUFFZDtNQUZWLENBSFc7TUFPZmUsRUFBRSxFQUFFO1FBQ0ZGLFFBQVEsRUFBRUgsUUFBUSxHQUFHLEdBRG5CO1FBRUZJLFVBQVUsRUFBRWQ7TUFGVixDQVBXO01BV2ZnQixFQUFFLEVBQUU7UUFDRkgsUUFBUSxFQUFFSCxRQUFRLEdBQUcsR0FEbkI7UUFFRkksVUFBVSxFQUFFZDtNQUZWLENBWFc7TUFlZmlCLEVBQUUsRUFBRTtRQUNGSixRQUFRLEVBQUVILFFBQVEsR0FBRyxHQURuQjtRQUVGSSxVQUFVLEVBQUVaO01BRlYsQ0FmVztNQW1CZmdCLEVBQUUsRUFBRTtRQUNGTCxRQUFRLEVBQUVILFFBQVEsR0FBRyxHQURuQjtRQUVGSSxVQUFVLEVBQUVWO01BRlYsQ0FuQlc7TUF1QmZlLEVBQUUsRUFBRTtRQUNGTixRQUFRLEVBQUVILFFBRFI7UUFFRkksVUFBVSxFQUFFVjtNQUZWLENBdkJXO01BNEJmZ0IsS0FBSyxFQUFFO1FBQ0xQLFFBQVEsRUFBRUgsUUFBUSxHQUFHLEdBRGhCO1FBRUxJLFVBQVUsRUFBRVY7TUFGUCxDQTVCUTtNQWlDZixjQUFjO1FBQ1pTLFFBQVEsRUFBRUgsUUFBUSxHQUFHLEdBRFQ7UUFFWkksVUFBVSxFQUFFUjtNQUZBLENBakNDO01BcUNmLGVBQWU7UUFDYk8sUUFBUSxFQUFFSCxRQUFRLEdBQUcsR0FEUjtRQUViSSxVQUFVLEVBQUVSO01BRkMsQ0FyQ0E7TUEwQ2ZlLElBQUksRUFBRTtRQUNKUixRQUFRLEVBQUVILFFBRE47UUFFSkksVUFBVSxFQUFFUjtNQUZSLENBMUNTO01BK0NmLGNBQWM7UUFDWk8sUUFBUSxFQUFFSCxRQUFRLEdBQUcsR0FEVDtRQUVaSSxVQUFVLEVBQUVOO01BRkEsQ0EvQ0M7TUFvRGYsR0FBR2pCO0lBcERZLENBQWpCO0VBc0REOztBQXBGb0I7QUF1RnZCLE1BQU0rQixLQUFLLEdBQUcsSUFBSXJDLFNBQUosRUFBZDtBQUNBcUMsS0FBSyxDQUFDakMsU0FBTixDQUFnQkwsV0FBaEI7QUFFQSxlQUFlc0MsS0FBZiJ9