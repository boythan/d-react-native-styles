import { StyleSheet, Platform } from 'react-native';
import Colors from "../color/_color";
import Sizes from "../size/_size";
import { generateStyleValue } from "../modifier";
const {
  borderTiny,
  borderMedium,
  borderSmall,
  borderLarge,
  borderXLarge,
  borderRadiusTiny,
  borderRadiusSmall,
  borderRadiusMedium,
  borderRadiusLarge,
  borderRadiusXLarge
} = Sizes;
const {
  grey
} = Colors;
export const BORDER_WIDTH_VARIATIONS = {
  border: 'borderWidth',
  'border-top': 'borderTopWidth',
  'border-bottom': 'borderBottomWidth',
  'border-left': 'borderLeftWidth',
  'border-right': 'borderRightWidth',
  'border-start': 'borderLeftWidth',
  'border-end': 'borderRightWidth'
};
export const BORDER_RADIUS_VARIATIONS = {
  rounded: 'borderRadius',
  'rounded-top-left': 'borderTopLeftRadius',
  'rounded-top-right': 'borderTopRightRadius',
  'rounded-bottom-left': 'borderBottomLeftRadius',
  'rounded-bottom-right': 'borderBottomRightRadius',
  'rounded-top': ['borderTopLeftRadius', 'borderTopRightRadius'],
  'rounded-bottom': ['borderBottomLeftRadius', 'borderBottomRightRadius'],
  'rounded-left': ['borderTopLeftRadius', 'borderBottomLeftRadius'],
  'rounded-right': ['borderTopRightRadius', 'borderBottomRightRadius'],
  'rounded-start': ['borderTopLeftRadius', 'borderBottomLeftRadius'],
  'rounded-end': ['borderTopRightRadius', 'borderBottomRightRadius']
};
export const BORDER_WIDTH_VALUES = {
  '': borderTiny,
  0: 0,
  1: borderSmall,
  2: borderMedium,
  3: borderLarge,
  4: borderXLarge
};
export const BORDER_RADIUS_VALUES = {
  '': borderRadiusTiny,
  0: 0,
  1: borderRadiusSmall,
  2: borderRadiusMedium,
  3: borderRadiusLarge,
  4: borderRadiusXLarge,
  pilled: 999
};
const borderColorClass = generateStyleValue({
  border: 'borderColor'
}, Colors);
const borderWidthClass = generateStyleValue(BORDER_WIDTH_VARIATIONS, BORDER_WIDTH_VALUES, {
  borderColor: grey
});
const borderRadiusClass = generateStyleValue(BORDER_RADIUS_VARIATIONS, BORDER_RADIUS_VALUES, {
  borderColor: grey
});
const borderStyle = StyleSheet.create({
  'border-dashed': {
    borderWidth: borderSmall,
    borderColor: grey,
    borderStyle: 'dashed',
    borderRadius: Platform.OS === 'android' ? 1 : undefined
  },
  'rounded-pill': {
    borderRadius: 999
  },
  ...borderColorClass,
  ...borderWidthClass,
  ...borderRadiusClass
});
export default borderStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHlsZVNoZWV0IiwiUGxhdGZvcm0iLCJDb2xvcnMiLCJTaXplcyIsImdlbmVyYXRlU3R5bGVWYWx1ZSIsImJvcmRlclRpbnkiLCJib3JkZXJNZWRpdW0iLCJib3JkZXJTbWFsbCIsImJvcmRlckxhcmdlIiwiYm9yZGVyWExhcmdlIiwiYm9yZGVyUmFkaXVzVGlueSIsImJvcmRlclJhZGl1c1NtYWxsIiwiYm9yZGVyUmFkaXVzTWVkaXVtIiwiYm9yZGVyUmFkaXVzTGFyZ2UiLCJib3JkZXJSYWRpdXNYTGFyZ2UiLCJncmV5IiwiQk9SREVSX1dJRFRIX1ZBUklBVElPTlMiLCJib3JkZXIiLCJCT1JERVJfUkFESVVTX1ZBUklBVElPTlMiLCJyb3VuZGVkIiwiQk9SREVSX1dJRFRIX1ZBTFVFUyIsIkJPUkRFUl9SQURJVVNfVkFMVUVTIiwicGlsbGVkIiwiYm9yZGVyQ29sb3JDbGFzcyIsImJvcmRlcldpZHRoQ2xhc3MiLCJib3JkZXJDb2xvciIsImJvcmRlclJhZGl1c0NsYXNzIiwiYm9yZGVyU3R5bGUiLCJjcmVhdGUiLCJib3JkZXJXaWR0aCIsImJvcmRlclJhZGl1cyIsIk9TIiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RoZW1lL19ib3JkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdHlsZVNoZWV0LCBQbGF0Zm9ybX0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBDb2xvcnMgZnJvbSAnLi4vY29sb3IvX2NvbG9yJztcbmltcG9ydCBTaXplcyBmcm9tICcuLi9zaXplL19zaXplJztcbmltcG9ydCB7Z2VuZXJhdGVTdHlsZVZhbHVlfSBmcm9tICcuLi9tb2RpZmllcic7XG5cbmNvbnN0IHtcbiAgYm9yZGVyVGlueSxcbiAgYm9yZGVyTWVkaXVtLFxuICBib3JkZXJTbWFsbCxcbiAgYm9yZGVyTGFyZ2UsXG4gIGJvcmRlclhMYXJnZSxcbiAgYm9yZGVyUmFkaXVzVGlueSxcbiAgYm9yZGVyUmFkaXVzU21hbGwsXG4gIGJvcmRlclJhZGl1c01lZGl1bSxcbiAgYm9yZGVyUmFkaXVzTGFyZ2UsXG4gIGJvcmRlclJhZGl1c1hMYXJnZSxcbn0gPSBTaXplcztcblxuY29uc3Qge2dyZXl9ID0gQ29sb3JzO1xuXG5leHBvcnQgY29uc3QgQk9SREVSX1dJRFRIX1ZBUklBVElPTlMgPSB7XG4gIGJvcmRlcjogJ2JvcmRlcldpZHRoJyxcbiAgJ2JvcmRlci10b3AnOiAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyLWJvdHRvbSc6ICdib3JkZXJCb3R0b21XaWR0aCcsXG4gICdib3JkZXItbGVmdCc6ICdib3JkZXJMZWZ0V2lkdGgnLFxuICAnYm9yZGVyLXJpZ2h0JzogJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICAnYm9yZGVyLXN0YXJ0JzogJ2JvcmRlckxlZnRXaWR0aCcsXG4gICdib3JkZXItZW5kJzogJ2JvcmRlclJpZ2h0V2lkdGgnLFxufTtcblxuZXhwb3J0IGNvbnN0IEJPUkRFUl9SQURJVVNfVkFSSUFUSU9OUyA9IHtcbiAgcm91bmRlZDogJ2JvcmRlclJhZGl1cycsXG4gICdyb3VuZGVkLXRvcC1sZWZ0JzogJ2JvcmRlclRvcExlZnRSYWRpdXMnLFxuICAncm91bmRlZC10b3AtcmlnaHQnOiAnYm9yZGVyVG9wUmlnaHRSYWRpdXMnLFxuICAncm91bmRlZC1ib3R0b20tbGVmdCc6ICdib3JkZXJCb3R0b21MZWZ0UmFkaXVzJyxcbiAgJ3JvdW5kZWQtYm90dG9tLXJpZ2h0JzogJ2JvcmRlckJvdHRvbVJpZ2h0UmFkaXVzJyxcbiAgJ3JvdW5kZWQtdG9wJzogWydib3JkZXJUb3BMZWZ0UmFkaXVzJywgJ2JvcmRlclRvcFJpZ2h0UmFkaXVzJ10sXG4gICdyb3VuZGVkLWJvdHRvbSc6IFsnYm9yZGVyQm90dG9tTGVmdFJhZGl1cycsICdib3JkZXJCb3R0b21SaWdodFJhZGl1cyddLFxuICAncm91bmRlZC1sZWZ0JzogWydib3JkZXJUb3BMZWZ0UmFkaXVzJywgJ2JvcmRlckJvdHRvbUxlZnRSYWRpdXMnXSxcbiAgJ3JvdW5kZWQtcmlnaHQnOiBbJ2JvcmRlclRvcFJpZ2h0UmFkaXVzJywgJ2JvcmRlckJvdHRvbVJpZ2h0UmFkaXVzJ10sXG4gICdyb3VuZGVkLXN0YXJ0JzogWydib3JkZXJUb3BMZWZ0UmFkaXVzJywgJ2JvcmRlckJvdHRvbUxlZnRSYWRpdXMnXSxcbiAgJ3JvdW5kZWQtZW5kJzogWydib3JkZXJUb3BSaWdodFJhZGl1cycsICdib3JkZXJCb3R0b21SaWdodFJhZGl1cyddLFxufTtcblxuZXhwb3J0IGNvbnN0IEJPUkRFUl9XSURUSF9WQUxVRVMgPSB7XG4gICcnOiBib3JkZXJUaW55LFxuICAwOiAwLFxuICAxOiBib3JkZXJTbWFsbCxcbiAgMjogYm9yZGVyTWVkaXVtLFxuICAzOiBib3JkZXJMYXJnZSxcbiAgNDogYm9yZGVyWExhcmdlLFxufTtcblxuZXhwb3J0IGNvbnN0IEJPUkRFUl9SQURJVVNfVkFMVUVTID0ge1xuICAnJzogYm9yZGVyUmFkaXVzVGlueSxcbiAgMDogMCxcbiAgMTogYm9yZGVyUmFkaXVzU21hbGwsXG4gIDI6IGJvcmRlclJhZGl1c01lZGl1bSxcbiAgMzogYm9yZGVyUmFkaXVzTGFyZ2UsXG4gIDQ6IGJvcmRlclJhZGl1c1hMYXJnZSxcbiAgcGlsbGVkOiA5OTksXG59O1xuXG5jb25zdCBib3JkZXJDb2xvckNsYXNzID0gZ2VuZXJhdGVTdHlsZVZhbHVlKHtib3JkZXI6ICdib3JkZXJDb2xvcid9LCBDb2xvcnMpO1xuXG5jb25zdCBib3JkZXJXaWR0aENsYXNzID0gZ2VuZXJhdGVTdHlsZVZhbHVlKFxuICBCT1JERVJfV0lEVEhfVkFSSUFUSU9OUyxcbiAgQk9SREVSX1dJRFRIX1ZBTFVFUyxcbiAge2JvcmRlckNvbG9yOiBncmV5fSxcbik7XG5cbmNvbnN0IGJvcmRlclJhZGl1c0NsYXNzID0gZ2VuZXJhdGVTdHlsZVZhbHVlKFxuICBCT1JERVJfUkFESVVTX1ZBUklBVElPTlMsXG4gIEJPUkRFUl9SQURJVVNfVkFMVUVTLFxuICB7Ym9yZGVyQ29sb3I6IGdyZXl9LFxuKTtcblxuY29uc3QgYm9yZGVyU3R5bGUgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICdib3JkZXItZGFzaGVkJzoge1xuICAgIGJvcmRlcldpZHRoOiBib3JkZXJTbWFsbCxcbiAgICBib3JkZXJDb2xvcjogZ3JleSxcbiAgICBib3JkZXJTdHlsZTogJ2Rhc2hlZCcsXG4gICAgYm9yZGVyUmFkaXVzOiBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnID8gMSA6IHVuZGVmaW5lZCxcbiAgfSxcbiAgJ3JvdW5kZWQtcGlsbCc6IHtcbiAgICBib3JkZXJSYWRpdXM6IDk5OSxcbiAgfSxcbiAgLi4uYm9yZGVyQ29sb3JDbGFzcyxcbiAgLi4uYm9yZGVyV2lkdGhDbGFzcyxcbiAgLi4uYm9yZGVyUmFkaXVzQ2xhc3MsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYm9yZGVyU3R5bGU7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVFBLFVBQVIsRUFBb0JDLFFBQXBCLFFBQW1DLGNBQW5DO0FBQ0EsT0FBT0MsTUFBUDtBQUNBLE9BQU9DLEtBQVA7QUFDQSxTQUFRQyxrQkFBUjtBQUVBLE1BQU07RUFDSkMsVUFESTtFQUVKQyxZQUZJO0VBR0pDLFdBSEk7RUFJSkMsV0FKSTtFQUtKQyxZQUxJO0VBTUpDLGdCQU5JO0VBT0pDLGlCQVBJO0VBUUpDLGtCQVJJO0VBU0pDLGlCQVRJO0VBVUpDO0FBVkksSUFXRlgsS0FYSjtBQWFBLE1BQU07RUFBQ1k7QUFBRCxJQUFTYixNQUFmO0FBRUEsT0FBTyxNQUFNYyx1QkFBdUIsR0FBRztFQUNyQ0MsTUFBTSxFQUFFLGFBRDZCO0VBRXJDLGNBQWMsZ0JBRnVCO0VBR3JDLGlCQUFpQixtQkFIb0I7RUFJckMsZUFBZSxpQkFKc0I7RUFLckMsZ0JBQWdCLGtCQUxxQjtFQU1yQyxnQkFBZ0IsaUJBTnFCO0VBT3JDLGNBQWM7QUFQdUIsQ0FBaEM7QUFVUCxPQUFPLE1BQU1DLHdCQUF3QixHQUFHO0VBQ3RDQyxPQUFPLEVBQUUsY0FENkI7RUFFdEMsb0JBQW9CLHFCQUZrQjtFQUd0QyxxQkFBcUIsc0JBSGlCO0VBSXRDLHVCQUF1Qix3QkFKZTtFQUt0Qyx3QkFBd0IseUJBTGM7RUFNdEMsZUFBZSxDQUFDLHFCQUFELEVBQXdCLHNCQUF4QixDQU51QjtFQU90QyxrQkFBa0IsQ0FBQyx3QkFBRCxFQUEyQix5QkFBM0IsQ0FQb0I7RUFRdEMsZ0JBQWdCLENBQUMscUJBQUQsRUFBd0Isd0JBQXhCLENBUnNCO0VBU3RDLGlCQUFpQixDQUFDLHNCQUFELEVBQXlCLHlCQUF6QixDQVRxQjtFQVV0QyxpQkFBaUIsQ0FBQyxxQkFBRCxFQUF3Qix3QkFBeEIsQ0FWcUI7RUFXdEMsZUFBZSxDQUFDLHNCQUFELEVBQXlCLHlCQUF6QjtBQVh1QixDQUFqQztBQWNQLE9BQU8sTUFBTUMsbUJBQW1CLEdBQUc7RUFDakMsSUFBSWYsVUFENkI7RUFFakMsR0FBRyxDQUY4QjtFQUdqQyxHQUFHRSxXQUg4QjtFQUlqQyxHQUFHRCxZQUo4QjtFQUtqQyxHQUFHRSxXQUw4QjtFQU1qQyxHQUFHQztBQU44QixDQUE1QjtBQVNQLE9BQU8sTUFBTVksb0JBQW9CLEdBQUc7RUFDbEMsSUFBSVgsZ0JBRDhCO0VBRWxDLEdBQUcsQ0FGK0I7RUFHbEMsR0FBR0MsaUJBSCtCO0VBSWxDLEdBQUdDLGtCQUorQjtFQUtsQyxHQUFHQyxpQkFMK0I7RUFNbEMsR0FBR0Msa0JBTitCO0VBT2xDUSxNQUFNLEVBQUU7QUFQMEIsQ0FBN0I7QUFVUCxNQUFNQyxnQkFBZ0IsR0FBR25CLGtCQUFrQixDQUFDO0VBQUNhLE1BQU0sRUFBRTtBQUFULENBQUQsRUFBMEJmLE1BQTFCLENBQTNDO0FBRUEsTUFBTXNCLGdCQUFnQixHQUFHcEIsa0JBQWtCLENBQ3pDWSx1QkFEeUMsRUFFekNJLG1CQUZ5QyxFQUd6QztFQUFDSyxXQUFXLEVBQUVWO0FBQWQsQ0FIeUMsQ0FBM0M7QUFNQSxNQUFNVyxpQkFBaUIsR0FBR3RCLGtCQUFrQixDQUMxQ2Msd0JBRDBDLEVBRTFDRyxvQkFGMEMsRUFHMUM7RUFBQ0ksV0FBVyxFQUFFVjtBQUFkLENBSDBDLENBQTVDO0FBTUEsTUFBTVksV0FBVyxHQUFHM0IsVUFBVSxDQUFDNEIsTUFBWCxDQUFrQjtFQUNwQyxpQkFBaUI7SUFDZkMsV0FBVyxFQUFFdEIsV0FERTtJQUVma0IsV0FBVyxFQUFFVixJQUZFO0lBR2ZZLFdBQVcsRUFBRSxRQUhFO0lBSWZHLFlBQVksRUFBRTdCLFFBQVEsQ0FBQzhCLEVBQVQsS0FBZ0IsU0FBaEIsR0FBNEIsQ0FBNUIsR0FBZ0NDO0VBSi9CLENBRG1CO0VBT3BDLGdCQUFnQjtJQUNkRixZQUFZLEVBQUU7RUFEQSxDQVBvQjtFQVVwQyxHQUFHUCxnQkFWaUM7RUFXcEMsR0FBR0MsZ0JBWGlDO0VBWXBDLEdBQUdFO0FBWmlDLENBQWxCLENBQXBCO0FBZUEsZUFBZUMsV0FBZiJ9