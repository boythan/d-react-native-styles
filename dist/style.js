/* eslint-disable no-nested-ternary */
import _ from 'lodash';
import { StyleSheet } from 'react-native';
import backgroundStyle from "./theme/_background";
import borderStyle from "./theme/_border";
import flexStyle from "./theme/_flex";
import imageStyle from "./theme/_image";
import marginPadding from "./theme/_padding-margin";
import positionStyle from "./theme/_position";
import shadowStyle from "./theme/_shadow";
import textStyle from "./theme/_text";
import widthHeightStyle from "./theme/_width-height";
export const styles = (...args) => {
  let styleList = [];

  for (let i = 0; i < args.length; i++) {
    let arg = args[i];
    if (!arg) continue;
    let argType = typeof arg;

    if (argType === 'string' || argType === 'number') {
      const argStyles = _.split(arg, ' ');

      styleList = styleList.concat(argStyles);
    } else if (Array.isArray(arg)) {
      if (arg.length) {
        const inner = styles.apply(null, arg);

        if (inner) {
          styleList = styleList.concat(inner);
        }
      }
    } else if (argType === 'object') {
      if (arg.toString === Object.prototype.toString) {
        for (var key in arg) {
          if (_.isBoolean(arg[key]) && arg[key]) {
            const keyStyles = _.split(key, ' ');

            styleList = styleList.concat(keyStyles);
          }

          if (_.isString(arg[key]) || _.isNumber(arg[key])) {
            styleList.push(arg);
          }
        }
      } else {
        styleList.push(arg.toString());
      }
    }
  }

  styleList = _.map(styleList, item => {
    var styleType = typeof item;

    if (styleType === 'string') {
      return style[item];
    }

    return item;
  });
  return styleList;
};
const style = StyleSheet.create({ ...flexStyle,
  ...marginPadding,
  ...backgroundStyle,
  ...borderStyle,
  ...widthHeightStyle,
  ...textStyle,
  ...positionStyle,
  ...imageStyle,
  ...shadowStyle
});
export default style;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfIiwiU3R5bGVTaGVldCIsImJhY2tncm91bmRTdHlsZSIsImJvcmRlclN0eWxlIiwiZmxleFN0eWxlIiwiaW1hZ2VTdHlsZSIsIm1hcmdpblBhZGRpbmciLCJwb3NpdGlvblN0eWxlIiwic2hhZG93U3R5bGUiLCJ0ZXh0U3R5bGUiLCJ3aWR0aEhlaWdodFN0eWxlIiwic3R5bGVzIiwiYXJncyIsInN0eWxlTGlzdCIsImkiLCJsZW5ndGgiLCJhcmciLCJhcmdUeXBlIiwiYXJnU3R5bGVzIiwic3BsaXQiLCJjb25jYXQiLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsImFwcGx5IiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJrZXkiLCJpc0Jvb2xlYW4iLCJrZXlTdHlsZXMiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwicHVzaCIsIm1hcCIsIml0ZW0iLCJzdHlsZVR5cGUiLCJzdHlsZSIsImNyZWF0ZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXN0ZWQtdGVybmFyeSAqL1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7U3R5bGVTaGVldH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBiYWNrZ3JvdW5kU3R5bGUgZnJvbSAnLi90aGVtZS9fYmFja2dyb3VuZCc7XG5pbXBvcnQgYm9yZGVyU3R5bGUgZnJvbSAnLi90aGVtZS9fYm9yZGVyJztcbmltcG9ydCBmbGV4U3R5bGUgZnJvbSAnLi90aGVtZS9fZmxleCc7XG5pbXBvcnQgaW1hZ2VTdHlsZSBmcm9tICcuL3RoZW1lL19pbWFnZSc7XG5pbXBvcnQgbWFyZ2luUGFkZGluZyBmcm9tICcuL3RoZW1lL19wYWRkaW5nLW1hcmdpbic7XG5pbXBvcnQgcG9zaXRpb25TdHlsZSBmcm9tICcuL3RoZW1lL19wb3NpdGlvbic7XG5pbXBvcnQgc2hhZG93U3R5bGUgZnJvbSAnLi90aGVtZS9fc2hhZG93JztcbmltcG9ydCB0ZXh0U3R5bGUgZnJvbSAnLi90aGVtZS9fdGV4dCc7XG5pbXBvcnQgd2lkdGhIZWlnaHRTdHlsZSBmcm9tICcuL3RoZW1lL193aWR0aC1oZWlnaHQnO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVzID0gKC4uLmFyZ3M6IGFueSkgPT4ge1xuICBsZXQgc3R5bGVMaXN0OiBhbnlbXSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhcmcgPSBhcmdzW2ldO1xuICAgIGlmICghYXJnKSBjb250aW51ZTtcblxuICAgIGxldCBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuICAgIGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuICAgICAgY29uc3QgYXJnU3R5bGVzID0gXy5zcGxpdChhcmcsICcgJyk7XG4gICAgICBzdHlsZUxpc3QgPSBzdHlsZUxpc3QuY29uY2F0KGFyZ1N0eWxlcyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgIGlmIChhcmcubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGlubmVyOiBhbnkgPSBzdHlsZXMuYXBwbHkobnVsbCwgYXJnKTtcbiAgICAgICAgaWYgKGlubmVyKSB7XG4gICAgICAgICAgc3R5bGVMaXN0ID0gc3R5bGVMaXN0LmNvbmNhdChpbm5lcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoYXJnLnRvU3RyaW5nID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhcmcpIHtcbiAgICAgICAgICBpZiAoXy5pc0Jvb2xlYW4oYXJnW2tleV0pICYmIGFyZ1trZXldKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlTdHlsZXMgPSBfLnNwbGl0KGtleSwgJyAnKTtcbiAgICAgICAgICAgIHN0eWxlTGlzdCA9IHN0eWxlTGlzdC5jb25jYXQoa2V5U3R5bGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF8uaXNTdHJpbmcoYXJnW2tleV0pIHx8IF8uaXNOdW1iZXIoYXJnW2tleV0pKSB7XG4gICAgICAgICAgICBzdHlsZUxpc3QucHVzaChhcmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVMaXN0LnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzdHlsZUxpc3QgPSBfLm1hcChzdHlsZUxpc3QsIGl0ZW0gPT4ge1xuICAgIHZhciBzdHlsZVR5cGUgPSB0eXBlb2YgaXRlbTtcbiAgICBpZiAoc3R5bGVUeXBlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHN0eWxlW2l0ZW1dO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZUxpc3Q7XG59O1xuXG5jb25zdCBzdHlsZSA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgLi4uZmxleFN0eWxlLFxuICAuLi5tYXJnaW5QYWRkaW5nLFxuICAuLi5iYWNrZ3JvdW5kU3R5bGUsXG4gIC4uLmJvcmRlclN0eWxlLFxuICAuLi53aWR0aEhlaWdodFN0eWxlLFxuICAuLi50ZXh0U3R5bGUsXG4gIC4uLnBvc2l0aW9uU3R5bGUsXG4gIC4uLmltYWdlU3R5bGUsXG4gIC4uLnNoYWRvd1N0eWxlLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE9BQU9BLENBQVAsTUFBYyxRQUFkO0FBQ0EsU0FBUUMsVUFBUixRQUF5QixjQUF6QjtBQUNBLE9BQU9DLGVBQVA7QUFDQSxPQUFPQyxXQUFQO0FBQ0EsT0FBT0MsU0FBUDtBQUNBLE9BQU9DLFVBQVA7QUFDQSxPQUFPQyxhQUFQO0FBQ0EsT0FBT0MsYUFBUDtBQUNBLE9BQU9DLFdBQVA7QUFDQSxPQUFPQyxTQUFQO0FBQ0EsT0FBT0MsZ0JBQVA7QUFFQSxPQUFPLE1BQU1DLE1BQU0sR0FBRyxDQUFDLEdBQUdDLElBQUosS0FBa0I7RUFDdEMsSUFBSUMsU0FBZ0IsR0FBRyxFQUF2Qjs7RUFFQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLElBQUksQ0FBQ0csTUFBekIsRUFBaUNELENBQUMsRUFBbEMsRUFBc0M7SUFDcEMsSUFBSUUsR0FBRyxHQUFHSixJQUFJLENBQUNFLENBQUQsQ0FBZDtJQUNBLElBQUksQ0FBQ0UsR0FBTCxFQUFVO0lBRVYsSUFBSUMsT0FBTyxHQUFHLE9BQU9ELEdBQXJCOztJQUVBLElBQUlDLE9BQU8sS0FBSyxRQUFaLElBQXdCQSxPQUFPLEtBQUssUUFBeEMsRUFBa0Q7TUFDaEQsTUFBTUMsU0FBUyxHQUFHbEIsQ0FBQyxDQUFDbUIsS0FBRixDQUFRSCxHQUFSLEVBQWEsR0FBYixDQUFsQjs7TUFDQUgsU0FBUyxHQUFHQSxTQUFTLENBQUNPLE1BQVYsQ0FBaUJGLFNBQWpCLENBQVo7SUFDRCxDQUhELE1BR08sSUFBSUcsS0FBSyxDQUFDQyxPQUFOLENBQWNOLEdBQWQsQ0FBSixFQUF3QjtNQUM3QixJQUFJQSxHQUFHLENBQUNELE1BQVIsRUFBZ0I7UUFDZCxNQUFNUSxLQUFVLEdBQUdaLE1BQU0sQ0FBQ2EsS0FBUCxDQUFhLElBQWIsRUFBbUJSLEdBQW5CLENBQW5COztRQUNBLElBQUlPLEtBQUosRUFBVztVQUNUVixTQUFTLEdBQUdBLFNBQVMsQ0FBQ08sTUFBVixDQUFpQkcsS0FBakIsQ0FBWjtRQUNEO01BQ0Y7SUFDRixDQVBNLE1BT0EsSUFBSU4sT0FBTyxLQUFLLFFBQWhCLEVBQTBCO01BQy9CLElBQUlELEdBQUcsQ0FBQ1MsUUFBSixLQUFpQkMsTUFBTSxDQUFDQyxTQUFQLENBQWlCRixRQUF0QyxFQUFnRDtRQUM5QyxLQUFLLElBQUlHLEdBQVQsSUFBZ0JaLEdBQWhCLEVBQXFCO1VBQ25CLElBQUloQixDQUFDLENBQUM2QixTQUFGLENBQVliLEdBQUcsQ0FBQ1ksR0FBRCxDQUFmLEtBQXlCWixHQUFHLENBQUNZLEdBQUQsQ0FBaEMsRUFBdUM7WUFDckMsTUFBTUUsU0FBUyxHQUFHOUIsQ0FBQyxDQUFDbUIsS0FBRixDQUFRUyxHQUFSLEVBQWEsR0FBYixDQUFsQjs7WUFDQWYsU0FBUyxHQUFHQSxTQUFTLENBQUNPLE1BQVYsQ0FBaUJVLFNBQWpCLENBQVo7VUFDRDs7VUFDRCxJQUFJOUIsQ0FBQyxDQUFDK0IsUUFBRixDQUFXZixHQUFHLENBQUNZLEdBQUQsQ0FBZCxLQUF3QjVCLENBQUMsQ0FBQ2dDLFFBQUYsQ0FBV2hCLEdBQUcsQ0FBQ1ksR0FBRCxDQUFkLENBQTVCLEVBQWtEO1lBQ2hEZixTQUFTLENBQUNvQixJQUFWLENBQWVqQixHQUFmO1VBQ0Q7UUFDRjtNQUNGLENBVkQsTUFVTztRQUNMSCxTQUFTLENBQUNvQixJQUFWLENBQWVqQixHQUFHLENBQUNTLFFBQUosRUFBZjtNQUNEO0lBQ0Y7RUFDRjs7RUFDRFosU0FBUyxHQUFHYixDQUFDLENBQUNrQyxHQUFGLENBQU1yQixTQUFOLEVBQWlCc0IsSUFBSSxJQUFJO0lBQ25DLElBQUlDLFNBQVMsR0FBRyxPQUFPRCxJQUF2Qjs7SUFDQSxJQUFJQyxTQUFTLEtBQUssUUFBbEIsRUFBNEI7TUFDMUIsT0FBT0MsS0FBSyxDQUFDRixJQUFELENBQVo7SUFDRDs7SUFDRCxPQUFPQSxJQUFQO0VBQ0QsQ0FOVyxDQUFaO0VBT0EsT0FBT3RCLFNBQVA7QUFDRCxDQTNDTTtBQTZDUCxNQUFNd0IsS0FBSyxHQUFHcEMsVUFBVSxDQUFDcUMsTUFBWCxDQUFrQixFQUM5QixHQUFHbEMsU0FEMkI7RUFFOUIsR0FBR0UsYUFGMkI7RUFHOUIsR0FBR0osZUFIMkI7RUFJOUIsR0FBR0MsV0FKMkI7RUFLOUIsR0FBR08sZ0JBTDJCO0VBTTlCLEdBQUdELFNBTjJCO0VBTzlCLEdBQUdGLGFBUDJCO0VBUTlCLEdBQUdGLFVBUjJCO0VBUzlCLEdBQUdHO0FBVDJCLENBQWxCLENBQWQ7QUFZQSxlQUFlNkIsS0FBZiJ9